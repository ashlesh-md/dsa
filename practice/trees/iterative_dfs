class Node:
    def __init__(self, val=None):
        self.left = None
        self.right = None
        self.val = val


def preorder_iterative(root):
    result = []
    stack = []

    if root:
        stack.append(root)

    while stack:
        node = stack.pop()
        result.append(node.val)

        if node.right:
            stack.append(node.right)
        if node.left:
            stack.append(node.left)

    return result


def inorder_iterative(root):
    result = []
    stack = []

    while stack or root:
        if root:
            stack.append(root)
            root = root.left
        else:
            root = stack.pop()
            result.append(root.val)
            root = root.right

    return result


def postorder_iterative(root):
    result = []
    stack = []

    while stack or root:
        if root:
            stack.append(root)
            result.insert(0, root.val)
            root = root.right
        else:
            root = stack.pop()
            root = root.left

    return result


root = Node(10)

root.left = Node(9)
root.right = Node(11)

root.left.left = Node(8)
root.left.right = Node(10)

root.right.right = Node(12)
root.right.left = Node(10)


print(inorder_iterative(root))
print(preorder_iterative(root))
print(postorder_iterative(root))
